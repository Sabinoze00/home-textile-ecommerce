generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String
  badge       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id                 String                 @id @default(cuid())
  name               String
  slug               String                 @unique
  description        String
  shortDescription   String?
  price              Decimal                @db.Decimal(10, 2)
  originalPrice      Decimal?               @db.Decimal(10, 2)
  discountPercentage Int?
  sku                String                 @unique
  inStock            Boolean                @default(true)
  stockQuantity      Int?
  tags               String[]               @default([])
  rating             Decimal?               @db.Decimal(3, 2)
  ratingCount        Int                    @default(0)
  isFeatured         Boolean                @default(false)
  isOnSale           Boolean                @default(false)
  isNew              Boolean                @default(false)
  isBestseller       Boolean                @default(false)
  categoryId         String
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  images             ProductImage[]
  reviews            ProductReview[]
  specifications     ProductSpecification[]
  variants           ProductVariant[]
  category           Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([description])
  @@index([categoryId])
  @@index([price])
  @@index([rating])
  @@index([isFeatured])
  @@index([isOnSale])
  @@index([isBestseller])
  @@index([inStock])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  type      String
  value     String
  price     Decimal? @db.Decimal(10, 2)
  sku       String?
  inStock   Boolean  @default(true)
  image     String?
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductSpecification {
  id        String   @id @default(cuid())
  name      String
  value     String
  category  String?
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specifications")
}

model ProductReview {
  id                 String   @id @default(cuid())
  userName           String
  userEmail          String?
  rating             Int
  title              String
  comment            String
  isVerifiedPurchase Boolean  @default(false)
  helpful            Int      @default(0)
  productId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)
  accounts      Account[]
  addresses     Address[]
  carts         Cart[]
  orders        Order[]
  sessions      Session[]

  @@index([role])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Address {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  company        String?
  street         String
  city           String
  state          String
  postalCode     String
  country        String
  phone          String?
  isDefault      Boolean  @default(false)
  type           String
  userId         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]  @relation("BillingAddress")
  shippingOrders Order[]  @relation("ShippingAddress")

  @@map("addresses")
}

model Order {
  id                String           @id @default(cuid())
  orderNumber       String           @unique
  status            OrderStatus      @default(PENDING)
  subtotal          Decimal          @db.Decimal(10, 2)
  tax               Decimal          @db.Decimal(10, 2)
  shipping          Decimal          @db.Decimal(10, 2)
  total             Decimal          @db.Decimal(10, 2)
  currency          String           @default("USD")
  notes             String?
  paymentStatus     PaymentStatus    @default(PENDING)
  paymentMethod     String?
  shippingMethod    String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  userId            String?
  shippingAddressId String
  billingAddressId  String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  paymentIntentId   String?
  paymentMetadata   Json?
  paymentProvider   PaymentProvider?
  paypalOrderId     String?
  items             OrderItem[]
  billingAddress    Address          @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address          @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([orderNumber])
  @@index([paymentProvider])
  @@index([paymentIntentId])
  @@index([paypalOrderId])
  @@map("orders")
}

model OrderItem {
  id           String   @id @default(cuid())
  quantity     Int
  price        Decimal  @db.Decimal(10, 2)
  total        Decimal  @db.Decimal(10, 2)
  productName  String
  productSlug  String
  productImage String
  variantName  String?
  variantValue String?
  orderId      String
  productId    String
  variantId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  cartId    String
  productId String
  variantId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, variantId])
  @@map("cart_items")
}

model WebhookEvent {
  id          String          @id @default(cuid())
  eventId     String          @unique
  provider    PaymentProvider
  eventType   String
  processed   Boolean         @default(false)
  processedAt DateTime?
  metadata    Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([eventId])
  @@index([provider])
  @@index([processed])
  @@map("webhook_events")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

enum Role {
  USER
  ADMIN
}
